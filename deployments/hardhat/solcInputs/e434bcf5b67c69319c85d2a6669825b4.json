{
  "language": "Solidity",
  "sources": {
    "contracts/DigitalIdentityManagement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ncontract DigitalIdentityManagement {\n    uint256 public serviceProvidersCount; // Variable to store the number of service providers\n    address[] public serviceProviderAddresses; // Array to store service provider addresses\n    struct User {\n        string user_FirstName;\n        string user_MiddleName;\n        string user_LastName;\n        string user_Email;\n        string user_dob;\n        string user_pno;\n        string userPhysicalAddress;\n        bool isUserSet;\n        mapping(address => bool) userAccessList; // Mapping of service providers with access\n    }\n\n    struct ServiceProvider {\n        address serviceProviderAddress;\n        string serviceProviderName;\n        bool isRegistered;\n    }\n\n    mapping(address => User) public users;\n    mapping(address => ServiceProvider) public serviceProviders;\n\n    event UserAdded(address indexed userAddress);\n    event ServiceProviderAdded(address indexed serviceProviderAddress);\n    event ServiceProviderRemoved(address indexed serviceProviderAddress);\n    event AccessGranted(address indexed userAddress, address indexed serviceProviderAddress);\n    event AccessRevoked(address indexed userAddress, address indexed serviceProviderAddress);\n    event UserUpdated(address indexed userAddress);\n\n\n    // Function to allow users to add their data\n    function addUser(\n        string memory _firstName,\n        string memory _middleName,\n        string memory _lastName,\n        string memory _email,\n        string memory _dob,\n        string memory _pno,\n        string memory _physicalAddress\n    ) external {\n        User storage user = users[msg.sender];\n        user.user_FirstName = _firstName;\n        user.user_MiddleName = _middleName;\n        user.user_LastName = _lastName;\n        user.user_Email = _email;\n        user.user_dob = _dob;\n        user.user_pno = _pno;\n        user.userPhysicalAddress = _physicalAddress;\n        user.isUserSet = true;\n\n        emit UserAdded(msg.sender);\n    }\n\n    // Function to update user data\n    function updateUser(\n        string memory _firstName,\n        string memory _middleName,\n        string memory _lastName,\n        string memory _email,\n        string memory _dob,\n        string memory _pno,\n        string memory _physicalAddress\n    ) external {\n        User storage user = users[msg.sender];\n        require(user.isUserSet, \"User not found\");\n        \n        user.user_FirstName = _firstName;\n        user.user_MiddleName = _middleName;\n        user.user_LastName = _lastName;\n        user.user_Email = _email;\n        user.user_dob = _dob;\n        user.user_pno = _pno;\n        user.userPhysicalAddress = _physicalAddress;\n\n        emit UserUpdated(msg.sender);\n    }\n\n    // Function to add a service provider\n    function addServiceProvider(address _serviceProviderAddress, string memory _serviceProviderName) external {\n        ServiceProvider storage provider = serviceProviders[_serviceProviderAddress];\n        require(!provider.isRegistered, \"Service Provider is already registered\");\n\n        provider.serviceProviderAddress = _serviceProviderAddress;\n        provider.serviceProviderName = _serviceProviderName;\n        provider.isRegistered = true;\n        serviceProvidersCount++; // Increment the count\n        serviceProviderAddresses.push(_serviceProviderAddress); // Add the address to the array\n\n        emit ServiceProviderAdded(_serviceProviderAddress);\n    }\n    // Function to remove a service provider\n    function removeServiceProvider(address _serviceProviderAddress) external {\n        ServiceProvider storage provider = serviceProviders[_serviceProviderAddress];\n        require(provider.isRegistered, \"Service Provider not registered\");\n\n        delete serviceProviders[_serviceProviderAddress];\n        serviceProvidersCount--; // Decrement the count\n        for (uint256 i = 0; i < serviceProviderAddresses.length; i++) {\n            if (serviceProviderAddresses[i] == _serviceProviderAddress) {\n                serviceProviderAddresses[i] = serviceProviderAddresses[serviceProviderAddresses.length - 1];\n                serviceProviderAddresses.pop();\n                break;\n            }\n        }\n\n        emit ServiceProviderRemoved(_serviceProviderAddress);\n    }\n\n\n    // Function to grant access to a service provider\n    function grantAccess(address _serviceProviderAddress) external {\n        // require(users[msg.sender].isUserSet, \"User not found\");\n        require(serviceProviders[_serviceProviderAddress].isRegistered, \"Service Provider not registered\");\n        require(!users[msg.sender].userAccessList[_serviceProviderAddress], \"Access already granted\");\n\n        users[msg.sender].userAccessList[_serviceProviderAddress] = true;\n\n        emit AccessGranted(msg.sender, _serviceProviderAddress);\n    }\n\n    // Function to revoke access from a service provider\n    function revokeAccess(address _serviceProviderAddress) external {\n        require(users[msg.sender].isUserSet, \"User not found\");\n        require(serviceProviders[_serviceProviderAddress].isRegistered, \"Service Provider not registered\");\n        require(users[msg.sender].userAccessList[_serviceProviderAddress], \"Access not granted\");\n\n        users[msg.sender].userAccessList[_serviceProviderAddress] = false;\n\n        emit AccessRevoked(msg.sender, _serviceProviderAddress);\n    }\n\n    // Function to get user details\n    function getUserDetails(address _userAddress) external view returns (\n        string memory user_FirstName,\n        string memory user_MiddleName,\n        string memory user_LastName,\n        string memory user_Email,\n        string memory user_dob,\n        string memory user_pno,\n        string memory userPhysicalAddress\n    ) {\n        if (_userAddress == address(0)) {\n            require(users[msg.sender].isUserSet, \"User not found\");\n            _userAddress = msg.sender;\n        } else {\n            require(users[_userAddress].isUserSet, \"User not found\");\n        }\n\n        require(\n            msg.sender == _userAddress || users[_userAddress].userAccessList[msg.sender],\n            \"Access denied\"\n        );\n\n        User storage user = users[_userAddress];\n        return (\n            user.user_FirstName,\n            user.user_MiddleName,\n            user.user_LastName,\n            user.user_Email,\n            user.user_dob,\n            user.user_pno,\n            user.userPhysicalAddress\n        );\n    }\n    // Function to get the list of service provider addresses with access\n    // Function to get the list of service provider addresses with access for the current user\n    function getUserAccessList() external view returns (address[] memory) {\n        require(users[msg.sender].isUserSet, \"User not found\");\n\n        address[] memory accessList = new address[](serviceProvidersCount);\n        uint256 count = 0;\n\n        for (uint256 i = 0; i < serviceProvidersCount; i++) {\n            address serviceProviderAddress = serviceProvidersByIndex(i);\n            if (users[msg.sender].userAccessList[serviceProviderAddress]) {\n                accessList[count] = serviceProviderAddress;\n                count++;\n            }\n        }\n\n        // Resize the array to the actual count\n        assembly {\n            mstore(accessList, count)\n        }\n\n        return accessList;\n    }\n\n    // Helper function to get a registered service provider address by index\n    function serviceProvidersByIndex(uint256 index) public view returns (address) {\n        require(index < serviceProvidersCount, \"Index out of bounds\");\n        \n        uint256 count = 0;\n        for (uint256 i = 0; i < serviceProviderAddresses.length; i++) {\n            address serviceProviderAddress = serviceProviderAddresses[i];\n            if (serviceProviders[serviceProviderAddress].isRegistered) {\n                if (count == index) {\n                    return serviceProviderAddress;\n                }\n                count++;\n            }\n        }\n        \n        revert(\"Service provider not found\");\n    }\n\n    // Function to allow a user to provide details to a service provider\n    function provideDetails(address _serviceProviderAddress) external view returns (\n        string memory user_FirstName,\n        string memory user_MiddleName,\n        string memory user_LastName,\n        string memory user_Email,\n        string memory user_dob,\n        string memory user_pno,\n        string memory userPhysicalAddress\n    ) {\n        require(users[msg.sender].isUserSet, \"User not found\");\n        require(serviceProviders[_serviceProviderAddress].isRegistered, \"Service Provider not registered\");\n        require(users[msg.sender].userAccessList[_serviceProviderAddress], \"Access denied\");\n\n        User storage user = users[msg.sender];\n        return (\n            user.user_FirstName,\n            user.user_MiddleName,\n            user.user_LastName,\n            user.user_Email,\n            user.user_dob,\n            user.user_pno,\n            user.userPhysicalAddress\n        );\n    }\n\n\n}\n// 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}